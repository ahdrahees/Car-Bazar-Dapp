service: (record {reservationFee:nat64}) -> {
    addCar: (record {model:text; name:text; imageUrl:text; companyName:text; price:nat64; topSpeed:text; cubicCapacityOfEngine:text}) -> (variant {Ok:record {id:text; model:text; creator:principal; name:text; isAvailable:bool; currentReservationEnds:opt nat64; imageUrl:text; currentReservedTo:opt principal; companyName:text; price:nat64; isReserved:bool; topSpeed:text; cubicCapacityOfEngine:text}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; NotBooked:text; Booked:text; NotOwner:text; PaymentCompleted:text}});
    completeReservation: (text, nat64, nat64, nat64) -> (variant {Ok:record {status:variant {PaymentPending:text; Completed:text}; noOfCars:nat64; carId:text; memo:nat64; payer:principal; amount:nat64; paid_at_block:opt nat64}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; NotBooked:text; Booked:text; NotOwner:text; PaymentCompleted:text}});
    createReservationOrder: (text, nat64) -> (variant {Ok:record {status:variant {PaymentPending:text; Completed:text}; noOfCars:nat64; carId:text; memo:nat64; payer:principal; amount:nat64; paid_at_block:opt nat64}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; NotBooked:text; Booked:text; NotOwner:text; PaymentCompleted:text}});
    deleteCar: (text) -> (variant {Ok:text; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; NotBooked:text; Booked:text; NotOwner:text; PaymentCompleted:text}});
    endReservation: (text) -> (variant {Ok:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; NotBooked:text; Booked:text; NotOwner:text; PaymentCompleted:text}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; NotBooked:text; Booked:text; NotOwner:text; PaymentCompleted:text}});
    getAddressFromPrincipal: (principal) -> (text) query;
    getCanisterAddress: () -> (text) query;
    getCar: (text) -> (variant {Ok:record {id:text; model:text; creator:principal; name:text; isAvailable:bool; currentReservationEnds:opt nat64; imageUrl:text; currentReservedTo:opt principal; companyName:text; price:nat64; isReserved:bool; topSpeed:text; cubicCapacityOfEngine:text}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; NotBooked:text; Booked:text; NotOwner:text; PaymentCompleted:text}}) query;
    getCarBookings: () -> (vec record {status:variant {PaymentPending:text; Completed:text}; noOfCars:nat64; carId:text; memo:nat64; payer:principal; amount:nat64; paid_at_block:opt nat64}) query;
    getCarByCompanyName: (text) -> (variant {Ok:vec record {id:text; model:text; creator:principal; name:text; isAvailable:bool; currentReservationEnds:opt nat64; imageUrl:text; currentReservedTo:opt principal; companyName:text; price:nat64; isReserved:bool; topSpeed:text; cubicCapacityOfEngine:text}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; NotBooked:text; Booked:text; NotOwner:text; PaymentCompleted:text}}) query;
    getCarByModel: (text) -> (variant {Ok:vec record {id:text; model:text; creator:principal; name:text; isAvailable:bool; currentReservationEnds:opt nat64; imageUrl:text; currentReservedTo:opt principal; companyName:text; price:nat64; isReserved:bool; topSpeed:text; cubicCapacityOfEngine:text}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; NotBooked:text; Booked:text; NotOwner:text; PaymentCompleted:text}}) query;
    getCarByPrice: (nat64) -> (variant {Ok:vec record {id:text; model:text; creator:principal; name:text; isAvailable:bool; currentReservationEnds:opt nat64; imageUrl:text; currentReservedTo:opt principal; companyName:text; price:nat64; isReserved:bool; topSpeed:text; cubicCapacityOfEngine:text}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; NotBooked:text; Booked:text; NotOwner:text; PaymentCompleted:text}}) query;
    getCars: () -> (vec record {id:text; model:text; creator:principal; name:text; isAvailable:bool; currentReservationEnds:opt nat64; imageUrl:text; currentReservedTo:opt principal; companyName:text; price:nat64; isReserved:bool; topSpeed:text; cubicCapacityOfEngine:text}) query;
    getPendings: () -> (vec record {status:variant {PaymentPending:text; Completed:text}; noOfCars:nat64; carId:text; memo:nat64; payer:principal; amount:nat64; paid_at_block:opt nat64}) query;
    getReservationFee: () -> (nat64) query;
    getTopSpeedCar: (text) -> (variant {Ok:vec record {id:text; model:text; creator:principal; name:text; isAvailable:bool; currentReservationEnds:opt nat64; imageUrl:text; currentReservedTo:opt principal; companyName:text; price:nat64; isReserved:bool; topSpeed:text; cubicCapacityOfEngine:text}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; NotBooked:text; Booked:text; NotOwner:text; PaymentCompleted:text}}) query;
}
